/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name */
#define CMDLINE_PARSER_PACKAGE "DBCombiner"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int combine_flag;	/**< @brief Combine a set of DB's, each coming from a different dataset subset (default=off).  */
  const char *combine_help; /**< @brief Combine a set of DB's, each coming from a different dataset subset help description.  */
  int reorganize_flag;	/**< @brief Reorganize a set of DB's, such as from 21000 DB files to 1000 DB files, ie expanding/shrinking the number of genes a DB contains (default=off).  */
  const char *reorganize_help; /**< @brief Reorganize a set of DB's, such as from 21000 DB files to 1000 DB files, ie expanding/shrinking the number of genes a DB contains help description.  */
  char * input_arg;	/**< @brief Input gene mapping.  */
  char * input_orig;	/**< @brief Input gene mapping original value given at command line.  */
  const char *input_help; /**< @brief Input gene mapping help description.  */
  char * db_arg;	/**< @brief Input a set of databaselet filenames (including path).  */
  char * db_orig;	/**< @brief Input a set of databaselet filenames (including path) original value given at command line.  */
  const char *db_help; /**< @brief Input a set of databaselet filenames (including path) help description.  */
  char * dir_out_arg;	/**< @brief Output database directory (default='.').  */
  char * dir_out_orig;	/**< @brief Output database directory original value given at command line.  */
  const char *dir_out_help; /**< @brief Output database directory help description.  */
  int is_nibble_flag;	/**< @brief Whether the input DB is nibble type (default=off).  */
  const char *is_nibble_help; /**< @brief Whether the input DB is nibble type help description.  */
  int split_flag;	/**< @brief Split to one-gene per file (default=off).  */
  const char *split_help; /**< @brief Split to one-gene per file help description.  */
  char * dataset_arg;	/**< @brief Dataset-platform mapping file.  */
  char * dataset_orig;	/**< @brief Dataset-platform mapping file original value given at command line.  */
  const char *dataset_help; /**< @brief Dataset-platform mapping file help description.  */
  char * db_dir_arg;	/**< @brief Source DB collection directory.  */
  char * db_dir_orig;	/**< @brief Source DB collection directory original value given at command line.  */
  const char *db_dir_help; /**< @brief Source DB collection directory help description.  */
  int src_db_num_arg;	/**< @brief Source DB number of files.  */
  char * src_db_num_orig;	/**< @brief Source DB number of files original value given at command line.  */
  const char *src_db_num_help; /**< @brief Source DB number of files help description.  */
  int dest_db_num_arg;	/**< @brief Destination DB number of files.  */
  char * dest_db_num_orig;	/**< @brief Destination DB number of files original value given at command line.  */
  const char *dest_db_num_help; /**< @brief Destination DB number of files help description.  */
  char * dest_db_dir_arg;	/**< @brief Destination DB directory.  */
  char * dest_db_dir_orig;	/**< @brief Destination DB directory original value given at command line.  */
  const char *dest_db_dir_help; /**< @brief Destination DB directory help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int combine_given ;	/**< @brief Whether combine was given.  */
  unsigned int reorganize_given ;	/**< @brief Whether reorganize was given.  */
  unsigned int input_given ;	/**< @brief Whether input was given.  */
  unsigned int db_given ;	/**< @brief Whether db was given.  */
  unsigned int dir_out_given ;	/**< @brief Whether dir_out was given.  */
  unsigned int is_nibble_given ;	/**< @brief Whether is_nibble was given.  */
  unsigned int split_given ;	/**< @brief Whether split was given.  */
  unsigned int dataset_given ;	/**< @brief Whether dataset was given.  */
  unsigned int db_dir_given ;	/**< @brief Whether db_dir was given.  */
  unsigned int src_db_num_given ;	/**< @brief Whether src_db_num was given.  */
  unsigned int dest_db_num_given ;	/**< @brief Whether dest_db_num was given.  */
  unsigned int dest_db_dir_given ;	/**< @brief Whether dest_db_dir was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
