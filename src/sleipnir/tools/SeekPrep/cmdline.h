/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "SeekPrep"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "SeekPrep"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int dab_flag;	/**< @brief DAB mode, suitable for dataset wide gene average and stdev calculation (default=off).  */
  const char *dab_help; /**< @brief DAB mode, suitable for dataset wide gene average and stdev calculation help description.  */
  int pclbin_flag;	/**< @brief PCL BIN mode, suitable for dataset gene variance calculation (default=off).  */
  const char *pclbin_help; /**< @brief PCL BIN mode, suitable for dataset gene variance calculation help description.  */
  int db_flag;	/**< @brief DB mode, suitable for platform wide gene average and stdev calculation (default=off).  */
  const char *db_help; /**< @brief DB mode, suitable for platform wide gene average and stdev calculation help description.  */
  int dabset_flag;	/**< @brief DAB set mode, sums a set of sparse rank-normalized (or subtract-z-normalized) DAB files, with weights or no weights (default=off).  */
  const char *dabset_help; /**< @brief DAB set mode, sums a set of sparse rank-normalized (or subtract-z-normalized) DAB files, with weights or no weights help description.  */
  int combined_dab_flag;	/**< @brief Combined DAB mode, divides a summed DAB file by total pair counts or dataset weights, generates a new normalized DAB file (default=off).  */
  const char *combined_dab_help; /**< @brief Combined DAB mode, divides a summed DAB file by total pair counts or dataset weights, generates a new normalized DAB file help description.  */
  char * dab_dir2_arg;	/**< @brief Directory containing the summed DAB file (default='NA').  */
  char * dab_dir2_orig;	/**< @brief Directory containing the summed DAB file original value given at command line.  */
  const char *dab_dir2_help; /**< @brief Directory containing the summed DAB file help description.  */
  char * dab_basename_arg;	/**< @brief Summed DAB basename (ie without extension) (default='NA').  */
  char * dab_basename_orig;	/**< @brief Summed DAB basename (ie without extension) original value given at command line.  */
  const char *dab_basename_help; /**< @brief Summed DAB basename (ie without extension) help description.  */
  char * dab_dir_arg;	/**< @brief Directory containing the DAB files (default='NA').  */
  char * dab_dir_orig;	/**< @brief Directory containing the DAB files original value given at command line.  */
  const char *dab_dir_help; /**< @brief Directory containing the DAB files help description.  */
  char * dablist_arg;	/**< @brief List of DAB files (default='NA').  */
  char * dablist_orig;	/**< @brief List of DAB files original value given at command line.  */
  const char *dablist_help; /**< @brief List of DAB files help description.  */
  char * out_dab_arg;	/**< @brief Output DAB file basename (ie without extension) (default='NA').  */
  char * out_dab_orig;	/**< @brief Output DAB file basename (ie without extension) original value given at command line.  */
  const char *out_dab_help; /**< @brief Output DAB file basename (ie without extension) help description.  */
  char * dataset_w_arg;	/**< @brief Dataset weights (optional) (default='NA').  */
  char * dataset_w_orig;	/**< @brief Dataset weights (optional) original value given at command line.  */
  const char *dataset_w_help; /**< @brief Dataset weights (optional) help description.  */
  int gavg_flag;	/**< @brief Generates gene average file (default=off).  */
  const char *gavg_help; /**< @brief Generates gene average file help description.  */
  int gpres_flag;	/**< @brief Generates gene presence file (default=off).  */
  const char *gpres_help; /**< @brief Generates gene presence file help description.  */
  char * dabinput_arg;	/**< @brief DAB dataset file.  */
  char * dabinput_orig;	/**< @brief DAB dataset file original value given at command line.  */
  const char *dabinput_help; /**< @brief DAB dataset file help description.  */
  float top_avg_percent_arg;	/**< @brief For gene average, top X percent of the values to take average (0 - 1.0) (default='1.0').  */
  char * top_avg_percent_orig;	/**< @brief For gene average, top X percent of the values to take average (0 - 1.0) original value given at command line.  */
  const char *top_avg_percent_help; /**< @brief For gene average, top X percent of the values to take average (0 - 1.0) help description.  */
  int norm_flag;	/**< @brief Normalize matrix then sparsify it (needs --norm_mode) (default=off).  */
  const char *norm_help; /**< @brief Normalize matrix then sparsify it (needs --norm_mode) help description.  */
  int view_flag;	/**< @brief View distribution of values in the matrix (default=off).  */
  const char *view_help; /**< @brief View distribution of values in the matrix help description.  */
  char * pclinput_arg;	/**< @brief PCL BIN file.  */
  char * pclinput_orig;	/**< @brief PCL BIN file original value given at command line.  */
  const char *pclinput_help; /**< @brief PCL BIN file help description.  */
  int gexpvarmean_flag;	/**< @brief Generates gene expression variance and mean files (.gexpvar, .gexpmean) (default=off).  */
  const char *gexpvarmean_help; /**< @brief Generates gene expression variance and mean files (.gexpvar, .gexpmean) help description.  */
  int sinfo_flag;	/**< @brief Generates sinfo file (dataset z score mean and stdev) (default=off).  */
  const char *sinfo_help; /**< @brief Generates sinfo file (dataset z score mean and stdev) help description.  */
  int gplat_flag;	/**< @brief Generates platform wide gene average and stdev file (default=off).  */
  const char *gplat_help; /**< @brief Generates platform wide gene average and stdev file help description.  */
  char * dblist_arg;	/**< @brief The DB file list (incl. file path).  */
  char * dblist_orig;	/**< @brief The DB file list (incl. file path) original value given at command line.  */
  const char *dblist_help; /**< @brief The DB file list (incl. file path) help description.  */
  char * dir_prep_in_arg;	/**< @brief The prep directory containing the .gavg and .gpres files.  */
  char * dir_prep_in_orig;	/**< @brief The prep directory containing the .gavg and .gpres files original value given at command line.  */
  const char *dir_prep_in_help; /**< @brief The prep directory containing the .gavg and .gpres files help description.  */
  char * dset_arg;	/**< @brief The dataset platform mapping file.  */
  char * dset_orig;	/**< @brief The dataset platform mapping file original value given at command line.  */
  const char *dset_help; /**< @brief The dataset platform mapping file help description.  */
  int useNibble_flag;	/**< @brief If the DB is nibble type (default=off).  */
  const char *useNibble_help; /**< @brief If the DB is nibble type help description.  */
  char * quant_arg;	/**< @brief Quant file.  */
  char * quant_orig;	/**< @brief Quant file original value given at command line.  */
  const char *quant_help; /**< @brief Quant file help description.  */
  int default_type_arg;	/**< @brief Default gene index type (choose unsigned short for genes, or unsigned int (32-bit) for transcripts) (required for DAB set mode and if --norm is enabled in DAB mode) (0 - unsigned int, 1 - unsigned short) (default='-1').  */
  char * default_type_orig;	/**< @brief Default gene index type (choose unsigned short for genes, or unsigned int (32-bit) for transcripts) (required for DAB set mode and if --norm is enabled in DAB mode) (0 - unsigned int, 1 - unsigned short) original value given at command line.  */
  const char *default_type_help; /**< @brief Default gene index type (choose unsigned short for genes, or unsigned int (32-bit) for transcripts) (required for DAB set mode and if --norm is enabled in DAB mode) (0 - unsigned int, 1 - unsigned short) help description.  */
  char * norm_mode_arg;	/**< @brief Normalization method: rank - rank-normalize matrix, subtract_z - subtract-z-normalize matrix (required for DAB set mode and if --norm is enabled, topological_overlap - TO measure from Ravasz et al) (default='NA').  */
  char * norm_mode_orig;	/**< @brief Normalization method: rank - rank-normalize matrix, subtract_z - subtract-z-normalize matrix (required for DAB set mode and if --norm is enabled, topological_overlap - TO measure from Ravasz et al) original value given at command line.  */
  const char *norm_mode_help; /**< @brief Normalization method: rank - rank-normalize matrix, subtract_z - subtract-z-normalize matrix (required for DAB set mode and if --norm is enabled, topological_overlap - TO measure from Ravasz et al) help description.  */
  int logit_flag;	/**< @brief For --gavg and --gplat, whether to take logit of the value first (useful if edge value is probability) (default=off).  */
  const char *logit_help; /**< @brief For --gavg and --gplat, whether to take logit of the value first (useful if edge value is probability) help description.  */
  int max_rank_arg;	/**< @brief Maximum rank value (for --norm_mode=rank) (default='-1').  */
  char * max_rank_orig;	/**< @brief Maximum rank value (for --norm_mode=rank) original value given at command line.  */
  const char *max_rank_help; /**< @brief Maximum rank value (for --norm_mode=rank) help description.  */
  float rbp_p_arg;	/**< @brief RBP p parameter (for --norm_mode=rank) (default='-1').  */
  char * rbp_p_orig;	/**< @brief RBP p parameter (for --norm_mode=rank) original value given at command line.  */
  const char *rbp_p_help; /**< @brief RBP p parameter (for --norm_mode=rank) help description.  */
  float cutoff_value_arg;	/**< @brief The cutoff value (for --norm_mode=subtract_z) (default='-1.0').  */
  char * cutoff_value_orig;	/**< @brief The cutoff value (for --norm_mode=subtract_z) original value given at command line.  */
  const char *cutoff_value_help; /**< @brief The cutoff value (for --norm_mode=subtract_z) help description.  */
  float exp_arg;	/**< @brief Raise the z-score to the power of this value (for --norm_mode=subtract_z) (default='-1.0').  */
  char * exp_orig;	/**< @brief Raise the z-score to the power of this value (for --norm_mode=subtract_z) original value given at command line.  */
  const char *exp_help; /**< @brief Raise the z-score to the power of this value (for --norm_mode=subtract_z) help description.  */
  char * input_arg;	/**< @brief Gene mapping file.  */
  char * input_orig;	/**< @brief Gene mapping file original value given at command line.  */
  const char *input_help; /**< @brief Gene mapping file help description.  */
  char * dir_out_arg;	/**< @brief Output directory.  */
  char * dir_out_orig;	/**< @brief Output directory original value given at command line.  */
  const char *dir_out_help; /**< @brief Output directory help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int dab_given ;	/**< @brief Whether dab was given.  */
  unsigned int pclbin_given ;	/**< @brief Whether pclbin was given.  */
  unsigned int db_given ;	/**< @brief Whether db was given.  */
  unsigned int dabset_given ;	/**< @brief Whether dabset was given.  */
  unsigned int combined_dab_given ;	/**< @brief Whether combined_dab was given.  */
  unsigned int dab_dir2_given ;	/**< @brief Whether dab_dir2 was given.  */
  unsigned int dab_basename_given ;	/**< @brief Whether dab_basename was given.  */
  unsigned int dab_dir_given ;	/**< @brief Whether dab_dir was given.  */
  unsigned int dablist_given ;	/**< @brief Whether dablist was given.  */
  unsigned int out_dab_given ;	/**< @brief Whether out_dab was given.  */
  unsigned int dataset_w_given ;	/**< @brief Whether dataset_w was given.  */
  unsigned int gavg_given ;	/**< @brief Whether gavg was given.  */
  unsigned int gpres_given ;	/**< @brief Whether gpres was given.  */
  unsigned int dabinput_given ;	/**< @brief Whether dabinput was given.  */
  unsigned int top_avg_percent_given ;	/**< @brief Whether top_avg_percent was given.  */
  unsigned int norm_given ;	/**< @brief Whether norm was given.  */
  unsigned int view_given ;	/**< @brief Whether view was given.  */
  unsigned int pclinput_given ;	/**< @brief Whether pclinput was given.  */
  unsigned int gexpvarmean_given ;	/**< @brief Whether gexpvarmean was given.  */
  unsigned int sinfo_given ;	/**< @brief Whether sinfo was given.  */
  unsigned int gplat_given ;	/**< @brief Whether gplat was given.  */
  unsigned int dblist_given ;	/**< @brief Whether dblist was given.  */
  unsigned int dir_prep_in_given ;	/**< @brief Whether dir_prep_in was given.  */
  unsigned int dset_given ;	/**< @brief Whether dset was given.  */
  unsigned int useNibble_given ;	/**< @brief Whether useNibble was given.  */
  unsigned int quant_given ;	/**< @brief Whether quant was given.  */
  unsigned int default_type_given ;	/**< @brief Whether default_type was given.  */
  unsigned int norm_mode_given ;	/**< @brief Whether norm_mode was given.  */
  unsigned int logit_given ;	/**< @brief Whether logit was given.  */
  unsigned int max_rank_given ;	/**< @brief Whether max_rank was given.  */
  unsigned int rbp_p_given ;	/**< @brief Whether rbp_p was given.  */
  unsigned int cutoff_value_given ;	/**< @brief Whether cutoff_value was given.  */
  unsigned int exp_given ;	/**< @brief Whether exp was given.  */
  unsigned int input_given ;	/**< @brief Whether input was given.  */
  unsigned int dir_out_given ;	/**< @brief Whether dir_out was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_norm_mode_values[];  /**< @brief Possible values for norm_mode. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
