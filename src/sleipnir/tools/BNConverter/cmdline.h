/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name */
#define CMDLINE_PARSER_PACKAGE "BNConverter"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * datadir_arg;	/**< @brief Data directory.  */
  char * datadir_orig;	/**< @brief Data directory original value given at command line.  */
  const char *datadir_help; /**< @brief Data directory help description.  */
  char * dataset_arg;	/**< @brief Dataset DAD file.  */
  char * dataset_orig;	/**< @brief Dataset DAD file original value given at command line.  */
  const char *dataset_help; /**< @brief Dataset DAD file help description.  */
  char * input_arg;	/**< @brief Input (X)DSL file.  */
  char * input_orig;	/**< @brief Input (X)DSL file original value given at command line.  */
  const char *input_help; /**< @brief Input (X)DSL file help description.  */
  char * output_arg;	/**< @brief Output (X)DSL or DAT/DAB file.  */
  char * output_orig;	/**< @brief Output (X)DSL or DAT/DAB file original value given at command line.  */
  const char *output_help; /**< @brief Output (X)DSL or DAT/DAB file help description.  */
  char * answers_arg;	/**< @brief Answer DAT/DAB file.  */
  char * answers_orig;	/**< @brief Answer DAT/DAB file original value given at command line.  */
  const char *answers_help; /**< @brief Answer DAT/DAB file help description.  */
  char * genes_arg;	/**< @brief Gene inclusion file.  */
  char * genes_orig;	/**< @brief Gene inclusion file original value given at command line.  */
  const char *genes_help; /**< @brief Gene inclusion file help description.  */
  char * genex_arg;	/**< @brief Gene exclusion file.  */
  char * genex_orig;	/**< @brief Gene exclusion file original value given at command line.  */
  const char *genex_help; /**< @brief Gene exclusion file help description.  */
  char * genet_arg;	/**< @brief Term inclusion file.  */
  char * genet_orig;	/**< @brief Term inclusion file original value given at command line.  */
  const char *genet_help; /**< @brief Term inclusion file help description.  */
  int randomize_flag;	/**< @brief Randomize CPTs before training (default=off).  */
  const char *randomize_help; /**< @brief Randomize CPTs before training help description.  */
  int murder_arg;	/**< @brief Kill the specified CPT before evaluation.  */
  char * murder_orig;	/**< @brief Kill the specified CPT before evaluation original value given at command line.  */
  const char *murder_help; /**< @brief Kill the specified CPT before evaluation help description.  */
  double test_arg;	/**< @brief Test fraction (default='0').  */
  char * test_orig;	/**< @brief Test fraction original value given at command line.  */
  const char *test_help; /**< @brief Test fraction help description.  */
  char * eval_train_arg;	/**< @brief Training evaluation results.  */
  char * eval_train_orig;	/**< @brief Training evaluation results original value given at command line.  */
  const char *eval_train_help; /**< @brief Training evaluation results help description.  */
  char * eval_test_arg;	/**< @brief Test evaluation results.  */
  char * eval_test_orig;	/**< @brief Test evaluation results original value given at command line.  */
  const char *eval_test_help; /**< @brief Test evaluation results help description.  */
  char * default_arg;	/**< @brief Bayes net containing defaults for cases with missing data.  */
  char * default_orig;	/**< @brief Bayes net containing defaults for cases with missing data original value given at command line.  */
  const char *default_help; /**< @brief Bayes net containing defaults for cases with missing data help description.  */
  int zero_flag;	/**< @brief Zero missing values (default=off).  */
  const char *zero_help; /**< @brief Zero missing values help description.  */
  int elr_flag;	/**< @brief Use ELR algorithm for learning (default=off).  */
  const char *elr_help; /**< @brief Use ELR algorithm for learning help description.  */
  int pnl_flag;	/**< @brief Use PNL library (default=off).  */
  const char *pnl_help; /**< @brief Use PNL library help description.  */
  int function_flag;	/**< @brief Use function-fitting networks (default=off).  */
  const char *function_help; /**< @brief Use function-fitting networks help description.  */
  int group_flag;	/**< @brief Group identical inputs (default=on).  */
  const char *group_help; /**< @brief Group identical inputs help description.  */
  int iterations_arg;	/**< @brief EM iterations (default='20').  */
  char * iterations_orig;	/**< @brief EM iterations original value given at command line.  */
  const char *iterations_help; /**< @brief EM iterations help description.  */
  int checkpoint_flag;	/**< @brief Checkpoint outputs after each iteration (default=off).  */
  const char *checkpoint_help; /**< @brief Checkpoint outputs after each iteration help description.  */
  int random_arg;	/**< @brief Seed random generator (default='0').  */
  char * random_orig;	/**< @brief Seed random generator original value given at command line.  */
  const char *random_help; /**< @brief Seed random generator help description.  */
  int verbosity_arg;	/**< @brief Message verbosity (default='5').  */
  char * verbosity_orig;	/**< @brief Message verbosity original value given at command line.  */
  const char *verbosity_help; /**< @brief Message verbosity help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int datadir_given ;	/**< @brief Whether datadir was given.  */
  unsigned int dataset_given ;	/**< @brief Whether dataset was given.  */
  unsigned int input_given ;	/**< @brief Whether input was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int answers_given ;	/**< @brief Whether answers was given.  */
  unsigned int genes_given ;	/**< @brief Whether genes was given.  */
  unsigned int genex_given ;	/**< @brief Whether genex was given.  */
  unsigned int genet_given ;	/**< @brief Whether genet was given.  */
  unsigned int randomize_given ;	/**< @brief Whether randomize was given.  */
  unsigned int murder_given ;	/**< @brief Whether murder was given.  */
  unsigned int test_given ;	/**< @brief Whether test was given.  */
  unsigned int eval_train_given ;	/**< @brief Whether eval_train was given.  */
  unsigned int eval_test_given ;	/**< @brief Whether eval_test was given.  */
  unsigned int default_given ;	/**< @brief Whether default was given.  */
  unsigned int zero_given ;	/**< @brief Whether zero was given.  */
  unsigned int elr_given ;	/**< @brief Whether elr was given.  */
  unsigned int pnl_given ;	/**< @brief Whether pnl was given.  */
  unsigned int function_given ;	/**< @brief Whether function was given.  */
  unsigned int group_given ;	/**< @brief Whether group was given.  */
  unsigned int iterations_given ;	/**< @brief Whether iterations was given.  */
  unsigned int checkpoint_given ;	/**< @brief Whether checkpoint was given.  */
  unsigned int random_given ;	/**< @brief Whether random was given.  */
  unsigned int verbosity_given ;	/**< @brief Whether verbosity was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
  int Data_group_counter; /**< @brief Counter for group Data */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
